extend type Query {
  cardRandom: Card! @cacheControl(maxAge: 10, scope: PUBLIC)
  cardSearch(q: String!, unique: String): Cards!
}

type Cards implements List {
  data: [Card!]!
  has_more: Boolean!
  next_page: String
  total_cards: Int
  warnings: [String]
}

type Card {
# Core Card Fields
  arena_id: Int
  id: String!
  lang: String!
  mtgo_id: Int
  mtgo_foil_id: Int
  multiverse_ids: [Int]
  tcgplayer_id: Int
  tcgplayer_etched_id: Int
  cardmarket_id: Int
  object: String!
  oracle_id: String!
  prints_search_uri: String!
  rulings_uri: String!
  scryfall_uri: String!
  uri: String!
# Gameplay Fields
  all_parts: [RelatedCard]
  card_faces: [CardFace]
  cmc: Float
  color_identity: [Color]
  color_indicator: [Color]
  colors: [Color]
  edhrec_rank: Int
  hand_modifier: String
  keywords: [String]!
  layout: String!
  legalities: Legalities!
  life_modifier: String
  loyalty: String
  mana_cost: String
  name: String!
  oracle_text: String
  oversized: Boolean!
  penny_rank: Int
  power: String
  produced_mana: [Color]
  reserved: Boolean!
  toughness: String
  type_line: String!
# Print Fields
  artist: String
  artist_ids: [String]!
  booster: Boolean!
  border_color: String!
  card_back_id: String!
  collector_number: String!
  content_warning: Boolean
  digital: Boolean!
  finishes: [String]
  flavor_name: String
  flavor_text: String
  foil: Boolean!
  frame_effects: [String]
  frame: String!
  full_art: Boolean!
  games: [String!]!
  highres_image: Boolean!
  illustration_id: String
  image_status: String!
  image_uris: ImageUris
  nonfoil: Boolean!
  prices: Prices!
  printed_name: String
  printed_text: String
  printed_type_line: String
  promo: Boolean!
  promo_types: [String]
  purchase_uris: PurchaseUris
  rarity: Rarity!
  related_uris: RelatedUris
  released_at: String!
  reprint: Boolean!
  scryfall_set_uri: String!
  set_name: String!
  set_search_uri: String!
  set_type: String!
  set_uri: String!
  set: String!
  set_id: String!
  story_spotlight: Boolean!
  textless: Boolean!
  variation: Boolean!
  variation_of: String
  security_stamp: String
  watermark: String
  preview: Preview
}

type Preview {
  source: String!
  source_uri: String
  previewed_at: String
}

type Prices {
  usd: String
  usd_foil: String
  usd_etched: String
  eur: String
  eur_foil: String
  tix: String
}

type RelatedUris {
  gatherer: String
  tcgplayer_infinite_articles: String
  tcgplayer_infinite_decks: String
  edhrec: String
}

type PurchaseUris {
  tcgplayer: String
  cardmarket: String
  cardhoarder: String
}

type ImageUris {
  small: String
  normal: String
  large: String
  png: String
  art_crop: String
  border_crop: String
}

type Legalities {
  standard: Legality!
  future: Legality!
  historic: Legality!
  gladiator: Legality!
  pioneer: Legality!
  explorer: Legality!
  modern: Legality!
  legacy: Legality!
  pauper: Legality!
  vintage: Legality!
  penny: Legality!
  commander: Legality!
  brawl: Legality!
  historicbrawl: Legality!
  alchemy: Legality!
  paupercommander: Legality!
  duel: Legality!
  oldschool: Legality!
  premodern: Legality!
}

type RelatedCard {
  id: String!
  object: String!
  component: String!
  name: String!
  type_line: String!
  uri: String!
}

type CardFace {
  artist: String
  cmc: Float
  color_indicator: [Color]
  colors: [Color]
  flavor_text: String
  illustration_id: String
  image_uris: ImageUris
  layout: String
  loyalty: String
  mana_cost: String!
  name: String!
  object: String!
  oracle_id: String
  oracle_text: String
  power: String
  printed_name: String
  printed_text: String
  printed_type_line: String
  toughness: String
  type_line: String
  watermark: String
}

enum Legality {
  LEGAL
  NOT_LEGAL
  RESTRICTED
  BANNED
}

enum Rarity {
  bonus
  COMMON
  UNCOMMON
  RARE
  MYTHIC
}
